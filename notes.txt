- Scene:
Default Global Object
Skybox
Music Track
Nighttime Sound Effects
	(For a Dungeon, always select Day Music Always...)
Map Location
Draw Config




- Collision:

- Cameras:
Stick with Normal0 for awhile

- Lights:
Light_0 (Morning)
Light_1 (Afternoon)
Light_2 (Evening)
Light_3 (Night)

- Entrances:
Spawn points
Actor Param 0x0FFF (Preserve previous velocity for smooth transition)

- Exits:
Transition between scene, either in code, or when Link walks on a particular polygon

- Cutscenes:

- Transition_Actor_List *:

- Rooms:

Every Scene is composed of multiple rooms

	- Render:
	
	- Actor List:
	Code related, drawn every frame, etc.
	Collectible Item (EN_ITEM00)
	
	- Object List:
	Static info, such as anim data, etc.
	Each Actor must have an object attached to it.
	*Fast64 Automatically attaches objects for vanilla actors!!!*
	
	
	
__________________________________________________________________

When adding scenes and rooms, it requires adding the data into 3 (or 4) files.

- spec, add:
(Add a new seg for each scene and room)
(Also, run "make clean" after editing the spec file.)

beginseg
    name "example"
    romalign 0x1000
    include "build/assets/scenes/examples/example_scene.o"
    number 2
endseg

beginseg
    name "example_room_0"
    romalign 0x1000
    include "build/assets/scenes/examples/example_room_0.o"
    number 3
endseg	

- scene_table.h, add:
/* 0x6E */ DEFINE_SCENE(example, none, SCENE_EXAMPLE, SDC_DEFAULT, 0, 0)

- entrance_table.h, add:
(Must be 4 of them, named appropriately. The game knows which one to use for; child/day, child/night, adult/day, adult/night)
/* 0x618 */ DEFINE_ENTRANCE(ENTR_EXAMPLE_0,   SCENE_EXAMPLE, 0, false, false, TRANS_TYPE_FADE_BLACK, TRANS_TYPE_FADE_BLACK)
/* 0x619 */ DEFINE_ENTRANCE(ENTR_EXAMPLE_0_1, SCENE_EXAMPLE, 0, false, false, TRANS_TYPE_FADE_BLACK, TRANS_TYPE_FADE_BLACK)
/* 0x61A */ DEFINE_ENTRANCE(ENTR_EXAMPLE_0_2, SCENE_EXAMPLE, 0, false, false, TRANS_TYPE_FADE_BLACK, TRANS_TYPE_FADE_BLACK)
/* 0x61B */ DEFINE_ENTRANCE(ENTR_EXAMPLE_0_3, SCENE_EXAMPLE, 0, false, false, TRANS_TYPE_FADE_BLACK, TRANS_TYPE_FADE_BLACK)

- z_select.c
For debug testing, add the level into the debug menu by adding before { "title", ...}
{ "126:Example", MapSelect_LoadGame, ENTR_EXAMPLE_0 },

- Doors
Proper width of a door in OOT is 6 units wide, by 10 units tall, by 2 deep
A Boss Door is 12x14, and is hardcoded to use flag 14, which, when or'd with the boss door param, (0x0140 | 0x14) = 0x0154


- z_scene_table.c
Contains "Scene Draw Configs" (SDC)


- z_obj_oshihiki.c
Contains Pushable block data, including the color. Must decalare a new case for each additional scene.




______________________________________________________
Adding actors

Overlay directorys in 
src/overlays/actors/example/example.c, example.h

Objects directory in
assets/objects/example/example.h, example_anim_idle.c, example_anim_idle.h, etc

- actor_table.h
add actor define
/* 0x01D7 */ DEFINE_ACTOR(Example, ACTOR_EXAMPLE, ACTOROVL_ALLOC_NORMAL, "Example")

- object_table.h
add actor define
/* 0x0191 */ DEFINE_OBJECT(object_example, OBJECT_EXAMPLE)


- spec
Add the object file and overlay file
object files end around line 6050, and are like this:

beginseg
    name "object_example"
    romalign 0x1000
    include "build/assets/objects/object_example/object_example.o"
    number 6
endseg


Overlay files end around line 3377, and are like this:

beginseg
    name "ovl_Example"
    include "build/src/overlays/actors/ovl_Example/example.o"
    include "build/src/overlays/actors/ovl_Example/ovl_Example_reloc.o"
endseg

(Be sure to have the proper amount of .c and .h files. You can create a new file, and fill it with #include, and include the appropriate missing files, as necessary.

In fast64, to add a custom actor, choose custom actor, and the Actor ID in the enum from actor_table.h, "ACTOR_EXAMPLE"

then, add the Object ID in the enum from object_table.h, "OBJECT_EXAMPLE"


__________________________________________________________________
Adding Items
Name the mesh as gGi"name"DL (the "Gi" is for Get item)

Export the model from blender as a DL (Display List), into
assets/objects/"example"


- z_draw.c

around line 80, add a new #include of your object you would like to import
#include "assets/objects/example/example.h"

go to "sDrawItemTable", and decide which item you will replace
comment out the original, and in the same, appropriate location, put your new object in, and give it the correct DL name, as exported earlier


- z_player.c
Loads the item into memory

go to "sGetItemTable", and go to the same item that you are replacing from earlier
Replace the object for now. Don't worry about the other stuff
GET_ITEM(ITEM_NAYRUS_LOVE, OBJECT_GI_EXAMPLE, GID_NAYRUS_LOVE, 0xAF<this value is the text ID, corresponding to the one in message_data.h>, 0x80, CHEST_ANIM_LONG),


at line 9989, increase the default value of MallocDebug (0x3008), to 0x9000, or something.
Then, at line 5431, modify the ASSERT inside of gObjectTable. (In the tutorial, he literally just commented it out.)

- icon_item_static.c
Put static icon in
/mod_assets/textures/icon_item_static/
and give it the exact name of the icon as found in icon_item_static.c, gItemIcon<name>Tex, look at the #include

#include "assets/textures/icon_item_static/nayrus_love_icon.rgba32.inc.c"

file name must be the same *except* for the end. Instead of ".inc.c" ".png" is just fine. The compiler will convert it.



__________________________________________________________

Text

Copy over message_data.h into
mod_assets/text/
then modify it from there.


____________________________________________
Roc's Feather physics modding, added
u8 featherJumpCount;
to the end of z64player.h

item info is found in
Player_UseItem in z_player.c

Added in:
            } else if (itemAction == PLAYER_IA_NAYRUS_LOVE) {
                Player_TryFeatherJump(this,play);


In code, to turn PLAYER_STATE2_ flags on and off, you use:
ON  = |= PLAYER_STATE2_<Number>;
OFF = &= ~PLAYER_STATE2_<Number>;






____________________________________________________________
Adding NPCs

folder structure is:
src/overlays/actors/ovl_Npc_Example/z_npc_example.c
src/overlays/actors/ovl_Npc_Example/z_npc_example.h

.c file should contain:
void Example_Init(Actor* thisx, PlayState* play);
void Example_Destroy(Actor* thisx, PlayState* play);
void Example_Update(Actor* thisx, PlayState* play);
void Example_Draw(Actor* thisx, PlayState* play);

Npc must be added to the spec file, and actor_table.h

- spec
beginseg
    name "ovl_Npc_Example"
    include "build/src/overlays/actors/ovl_Npc_Example/z_npc_example.o"
    include "build/src/overlays/actors/ovl_Npc_Example/ovl_Npc_Example_reloc.o"
endseg

- actor_table.h
DEFINE_ACTOR(Npc_Example, ACTOR_NPC_EXAMPLE, ACTOROVL_ALLOC_NORMAL, "Npc_Example")


header file should contain the typedef struct, "NpcInteractInfo"


- message_data.h
when adding dialogue, add a new textbox at the bottom, while updating the message ID. For example,
DEFINE_MESSAGE(0x71B3, TEXTBOX_TYPE_BLACK, TEXTBOX_POS_VARIABLE,
"Example Message")

Then reference that message ID in the c and h files like so:
- c
typedef enum {
    NPCEXAMPLE_MESSAGE_1 = 0X71B3,
} NpcExampleMessageId;

- h
typedef struct NpcExample {
    Actor actor;
    NpcInteractInfo interactInfo;
} NpcExample;

(Note: NpcInteractInfo references the func in src/code/z_actor.c)



